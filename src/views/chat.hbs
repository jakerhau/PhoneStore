{{!-- Page chat của admin với khách hàng --}}
<div class="min-h-screen bg-gray-100">
    <div class="container mx-auto px-4 py-6">
    <div class="max-w-7xl mx-auto">
            <!-- Header -->
            <div class="mb-6">
                <h1 class="text-3xl font-bold text-gray-900">Quản lý Chat</h1>
                <p class="text-gray-600 mt-2">Hỗ trợ khách hàng trực tuyến</p>
            </div>
            
            <div class="bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-200">
                <div class="flex flex-col lg:flex-row h-[calc(100vh-200px)] min-h-[600px]">
                {{!-- Sidebar - Danh sách khách hàng --}}
                    <div class="w-full lg:w-80 border-b lg:border-b-0 lg:border-r border-gray-200 flex flex-col">
                        <!-- Search Header -->
                        <div class="p-4 border-b border-gray-100 bg-gray-50">
                            <div class="flex items-center justify-between mb-3">
                                <h2 class="text-lg font-semibold text-gray-800">Khách hàng</h2>
                                <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full" id="customer-count">0</span>
                            </div>
                            <div class="relative">
                                <input type="text" id="search-customer" 
                                       placeholder="Tìm kiếm khách hàng..." 
                                       class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Customer List -->
                        <div class="flex-1 overflow-y-auto" id="customer-list">
                            <!-- Loading state -->
                            <div id="loading-customers" class="flex items-center justify-center h-32">
                                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                                <span class="ml-3 text-gray-600">Đang tải...</span>
                            </div>
                            <!-- Empty state -->
                            <div id="empty-customers" class="hidden p-8 text-center">
                                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-2-2V10a2 2 0 012-2h2V6a2 2 0 012-2h6a2 2 0 012 2v6a2 2 0 01-2 2z" />
                                </svg>
                                <h3 class="mt-2 text-sm font-medium text-gray-900">Chưa có khách hàng</h3>
                                <p class="mt-1 text-sm text-gray-500">Chưa có cuộc trò chuyện nào.</p>
                            </div>
                    </div>
                </div>

                {{!-- Main Chat Area --}}
                    <div class="flex-1 flex flex-col min-w-0">
                    {{!-- Chat Header --}}
                        <div class="p-4 border-b border-gray-200 bg-white">
                            <div id="chat-header-empty" class="text-center py-4">
                                <div class="flex flex-col items-center">
                                    <div class="w-12 h-12 rounded-full bg-gray-100 flex items-center justify-center mb-3">
                                        <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                                    </svg>
                                </div>
                                    <h3 class="text-lg font-medium text-gray-900">Chọn khách hàng để chat</h3>
                                    <p class="text-sm text-gray-500">Chọn một khách hàng từ danh sách bên trái để bắt đầu trò chuyện</p>
                                </div>
                            </div>
                            
                            <div id="chat-header-active" class="hidden">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center min-w-0">
                                        <div class="flex-shrink-0">
                                            <div class="w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center">
                                                <span class="text-white font-medium text-sm" id="customer-avatar">?</span>
                                            </div>
                                        </div>
                                        <div class="ml-3 min-w-0 flex-1">
                                            <h2 class="text-lg font-semibold text-gray-900 truncate" id="customer-name">Tên khách hàng</h2>
                                            <div class="flex items-center text-sm text-gray-500">
                                                <span class="w-2 h-2 bg-green-400 rounded-full mr-2"></span>
                                                <span id="customer-status">Đang hoạt động</span>
                                                <span class="mx-2">•</span>
                                                <span id="customer-id">ID: </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <button class="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors" title="Gọi điện">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                                    </svg>
                                </button>
                                        <button class="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors" title="Video call">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                    </svg>
                                </button>
                                        <button id="toggle-customer-info" class="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors" title="Thông tin khách hàng">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {{!-- Chat Messages --}}
                        <div class="flex-1 overflow-y-auto bg-gray-50" id="chat-messages-container">
                            <div id="chat-messages" class="p-4 space-y-4">
                                <!-- Messages will be loaded here -->
                    </div>

                            <!-- Typing indicator -->
                            <div id="typing-indicator" class="hidden px-4 pb-4">
                                <div class="flex items-center text-sm text-gray-500">
                                    <div class="flex space-x-1">
                                        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                                        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
                                        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                                    </div>
                                    <span class="ml-2">Khách hàng đang nhập...</span>
                                </div>
                            </div>
                    </div>

                    {{!-- Chat Input --}}
                        <div class="p-4 border-t border-gray-200 bg-white">
                            <form id="chat-form" class="flex items-end space-x-3">
                                <div class="flex-1">
                                    <div class="relative">
                                        <textarea name="message" 
                                                 rows="1"
                                                 class="w-full resize-none p-3 pr-12 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent max-h-32" 
                                                 placeholder="Nhập tin nhắn..." 
                                                 id="message-input"></textarea>
                                        <button type="button" class="absolute right-3 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 hover:text-gray-600">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            <button type="submit" 
                                        disabled
                                        id="send-button"
                                        class="flex-shrink-0 bg-blue-600 text-white p-3 rounded-xl hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                                </svg>
                            </button>
                        </form>
                            <div class="flex items-center justify-between mt-2 text-xs text-gray-500">
                                <span>Nhấn Enter để gửi, Shift + Enter để xuống dòng</span>
                                <span id="message-count">0/500</span>
                            </div>
                        </div>
                </div>

                {{!-- Customer Info Sidebar --}}
                    <div id="customer-info-sidebar" class="hidden lg:block w-80 border-l border-gray-200 bg-gray-50">
                        <div class="p-4 border-b border-gray-200 bg-white">
                            <h3 class="text-lg font-semibold text-gray-900">Thông tin khách hàng</h3>
                        </div>
                        <div class="p-4 space-y-6 overflow-y-auto h-full" id="customer-info">
                            <!-- Customer info will be loaded here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast notifications -->
<div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2"></div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    let currentSessionId = null;
    let typingTimeout;
    let isTyping = false;

    // Auto-resize textarea
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const messageCount = document.getElementById('message-count');

    messageInput.addEventListener('input', function() {
        // Auto resize
        this.style.height = 'auto';
        this.style.height = this.scrollHeight + 'px';
        
        // Update character count
        const count = this.value.length;
        messageCount.textContent = `${count}/500`;
        
        // Enable/disable send button
        sendButton.disabled = !this.value.trim() || !currentSessionId;
        
        // Handle typing indicator
        if (!isTyping && this.value.trim()) {
            isTyping = true;
            socket.emit('typing-start', currentSessionId);
        }
        
        clearTimeout(typingTimeout);
        typingTimeout = setTimeout(() => {
            isTyping = false;
            socket.emit('typing-stop', currentSessionId);
        }, 1000);
    });

    // Handle Enter key
    messageInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            if (!sendButton.disabled) {
                document.getElementById('chat-form').dispatchEvent(new Event('submit'));
            }
        }
    });

    // Load danh sách khách hàng
    async function loadCustomerList() {
        try {
            showLoading(true);
            const response = await fetch('/admin/chats');
            const data = await response.json();
            
            if (data.success) {
                const customerList = document.getElementById('customer-list');
                const customerCount = document.getElementById('customer-count');
                
                if (data.chats && data.chats.length > 0) {
                    customerCount.textContent = data.chats.length;
                customerList.innerHTML = data.chats.map(chat => `
                        <div class="customer-item p-4 hover:bg-blue-50 cursor-pointer border-b border-gray-100 transition-colors ${chat.sessionId === currentSessionId ? 'bg-blue-50 border-l-4 border-l-blue-500' : ''}" 
                             onclick="selectChat('${chat.sessionId}')">
                        <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    <div class="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center">
                                        <span class="text-white font-medium">${chat.customer.name.charAt(0).toUpperCase()}</span>
                                    </div>
                                    ${chat.unreadCount > 0 ? '<div class="w-3 h-3 bg-red-500 rounded-full -mt-2 -mr-2 relative"></div>' : ''}
                            </div>
                                <div class="ml-3 flex-1 min-w-0">
                                    <div class="flex items-center justify-between">
                                        <h3 class="text-sm font-medium text-gray-900 truncate">${chat.customer.name}</h3>
                                        <span class="text-xs text-gray-500">${chat.lastMessageTime ? formatTime(chat.lastMessageTime) : ''}</span>
                            </div>
                                    <p class="text-sm text-gray-600 truncate mt-1">${chat.lastMessage || 'Chưa có tin nhắn'}</p>
                                    ${chat.unreadCount > 0 ? `
                                        <div class="mt-1">
                                            <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                ${chat.unreadCount} tin nhắn mới
                                </span>
                                        </div>
                                    ` : ''}
                                </div>
                        </div>
                    </div>
                `).join('');
                    
                    document.getElementById('empty-customers').classList.add('hidden');
                } else {
                    customerCount.textContent = '0';
                    customerList.innerHTML = '';
                    document.getElementById('empty-customers').classList.remove('hidden');
                }
            }
        } catch (error) {
            console.error('Error loading customer list:', error);
            showToast('Không thể tải danh sách khách hàng', 'error');
        } finally {
            showLoading(false);
        }
    }

    // Show/hide loading
    function showLoading(show) {
        document.getElementById('loading-customers').style.display = show ? 'flex' : 'none';
    }

    // Chọn chat để xem
    async function selectChat(sessionId) {
        if (currentSessionId === sessionId) return;
        
        currentSessionId = sessionId;
        
        // Update UI
        document.getElementById('chat-header-empty').classList.add('hidden');
        document.getElementById('chat-header-active').classList.remove('hidden');
        sendButton.disabled = false;
        
        // Update active customer in list
        document.querySelectorAll('.customer-item').forEach(item => {
            item.classList.remove('bg-blue-50', 'border-l-4', 'border-l-blue-500');
        });
        document.querySelector(`[onclick="selectChat('${sessionId}')"]`)?.classList.add('bg-blue-50', 'border-l-4', 'border-l-blue-500');
        
        // Load thông tin chi tiết chat
        try {
            const response = await fetch(`/admin/chat/${sessionId}`);
            const data = await response.json();
            
            if (data.success) {
                // Update customer info in header
                document.getElementById('customer-name').textContent = data.chat.customer.name;
                document.getElementById('customer-id').textContent = `ID: ${sessionId}`;
                document.getElementById('customer-avatar').textContent = data.chat.customer.name.charAt(0).toUpperCase();
                
                // Update customer info sidebar
                updateCustomerInfo(data.chat.customer, data.chat);
                
                // Load messages
                loadMessages(data.messages || []);
                
                // Join chat room
                socket.emit('join-chat', sessionId);
                
                // Mark as read
                markAsRead(sessionId);
            }
        } catch (error) {
            console.error('Error loading chat details:', error);
            showToast('Không thể tải thông tin chat', 'error');
        }
    }

    // Load messages
    function loadMessages(messages) {
        const messagesContainer = document.getElementById('chat-messages');
        messagesContainer.innerHTML = '';
        
        if (messages.length === 0) {
            messagesContainer.innerHTML = `
                <div class="text-center py-8">
                    <div class="w-16 h-16 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-4">
                        <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                        </svg>
                    </div>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">Bắt đầu cuộc trò chuyện</h3>
                    <p class="text-gray-500">Gửi tin nhắn đầu tiên để bắt đầu hỗ trợ khách hàng.</p>
                </div>
            `;
        } else {
            messages.forEach(message => appendMessage(message));
        }
        
        scrollToBottom();
    }

    // Update customer info sidebar
    function updateCustomerInfo(customer, chat) {
                const customerInfo = document.getElementById('customer-info');
                customerInfo.innerHTML = `
            <div class="bg-white rounded-lg p-4 shadow-sm">
                <h4 class="text-sm font-medium text-gray-900 mb-3">Thông tin cá nhân</h4>
                <div class="space-y-3">
                    <div>
                        <label class="text-xs font-medium text-gray-500 uppercase tracking-wider">Tên khách hàng</label>
                        <p class="mt-1 text-sm text-gray-900">${customer.name}</p>
                        </div>
                    <div>
                        <label class="text-xs font-medium text-gray-500 uppercase tracking-wider">Email</label>
                        <p class="mt-1 text-sm text-gray-900">${customer.email || 'Chưa cập nhật'}</p>
                    </div>
                    <div>
                        <label class="text-xs font-medium text-gray-500 uppercase tracking-wider">Số điện thoại</label>
                        <p class="mt-1 text-sm text-gray-900">${customer.phone || 'Chưa cập nhật'}</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg p-4 shadow-sm">
                <h4 class="text-sm font-medium text-gray-900 mb-3">Trạng thái chat</h4>
                <div class="space-y-3">
                    <div class="flex items-center justify-between">
                        <span class="text-sm text-gray-600">Trạng thái</span>
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${chat.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">
                            ${chat.status === 'active' ? 'Đang hoạt động' : 'Không hoạt động'}
                        </span>
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="text-sm text-gray-600">Tin nhắn chưa đọc</span>
                        <span class="text-sm font-medium text-gray-900">${chat.unreadCount || 0}</span>
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="text-sm text-gray-600">Lần cuối hoạt động</span>
                        <span class="text-sm text-gray-900">${chat.lastActivity ? formatDateTime(chat.lastActivity) : 'Chưa xác định'}</span>
                    </div>
                        </div>
                    </div>
                `;
    }

    // Kết nối socket
    socket.on('connect', () => {
        console.log('Connected to chat server');
        loadCustomerList();
    });

    // Nhận tin nhắn mới
    socket.on('new-message', (message) => {
        if (message.sessionId === currentSessionId) {
            appendMessage(message);
            scrollToBottom();
            markAsRead(currentSessionId);
        }
        // Cập nhật lại danh sách khách hàng
        loadCustomerList();
    });

    // Nhận thông báo typing
    socket.on('typing-start', (sessionId) => {
        if (sessionId === currentSessionId) {
            document.getElementById('typing-indicator').classList.remove('hidden');
            scrollToBottom();
        }
    });

    socket.on('typing-stop', (sessionId) => {
        if (sessionId === currentSessionId) {
            document.getElementById('typing-indicator').classList.add('hidden');
        }
    });

    // Lắng nghe sự kiện khách hàng mới
    socket.on('new-customer', () => {
        loadCustomerList();
        showToast('Có khách hàng mới cần hỗ trợ!', 'info');
    });

    // Gửi tin nhắn
    document.getElementById('chat-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!currentSessionId) {
            showToast('Vui lòng chọn khách hàng để chat', 'warning');
            return;
        }

        const input = messageInput;
        const content = input.value.trim();
        
        if (!content) return;
        if (content.length > 500) {
            showToast('Tin nhắn quá dài (tối đa 500 ký tự)', 'warning');
            return;
        }

        // Disable form while sending
        sendButton.disabled = true;
        input.disabled = true;

        try {
            const response = await fetch(`/admin/chat/${currentSessionId}/messages`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ content })
            });

            if (response.ok) {
                input.value = '';
                input.style.height = 'auto';
                messageCount.textContent = '0/500';
                
                // Stop typing indicator
                if (isTyping) {
                    isTyping = false;
                    socket.emit('typing-stop', currentSessionId);
                }
                
                loadCustomerList();
            } else {
                throw new Error('Failed to send message');
            }
        } catch (error) {
            console.error('Error sending message:', error);
            showToast('Không thể gửi tin nhắn. Vui lòng thử lại.', 'error');
        } finally {
            sendButton.disabled = !input.value.trim() || !currentSessionId;
            input.disabled = false;
            input.focus();
        }
    });

    // Hàm thêm tin nhắn vào UI
    function appendMessage(message) {
        const messagesContainer = document.getElementById('chat-messages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `flex items-start ${message.sender === 'customer' ? '' : 'justify-end'} mb-4`;
        
        const isAdmin = message.sender !== 'customer';
        
        messageDiv.innerHTML = `
            <div class="${isAdmin ? 'order-2' : 'order-1'} flex items-end">
                <div class="${isAdmin ? 'bg-blue-600 text-white' : 'bg-white text-gray-800'} rounded-2xl py-2 px-4 shadow-sm max-w-xs lg:max-w-md">
                    <p class="text-sm whitespace-pre-wrap">${escapeHtml(message.content)}</p>
                </div>
            </div>
            <div class="${isAdmin ? 'order-1 mr-3' : 'order-2 ml-3'} text-xs text-gray-500 self-end mb-1">
                ${formatTime(message.createdAt)}
            </div>
        `;
        
        messagesContainer.appendChild(messageDiv);
    }

    // Mark messages as read
    async function markAsRead(sessionId) {
        try {
            await fetch(`/admin/chat/${sessionId}/read`, {
                method: 'POST'
            });
        } catch (error) {
            console.error('Error marking as read:', error);
        }
    }

    // Utility functions
    function scrollToBottom() {
        const container = document.getElementById('chat-messages-container');
        container.scrollTop = container.scrollHeight;
    }

    function formatTime(date) {
        return new Date(date).toLocaleTimeString('vi-VN', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }

    function formatDateTime(date) {
        return new Date(date).toLocaleString('vi-VN', {
            day: '2-digit',
            month: '2-digit', 
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto flex transform transition-all duration-300 ease-in-out translate-x-full`;
        
        const bgColor = {
            success: 'bg-green-50 border-green-200',
            error: 'bg-red-50 border-red-200', 
            warning: 'bg-yellow-50 border-yellow-200',
            info: 'bg-blue-50 border-blue-200'
        }[type] || 'bg-blue-50 border-blue-200';
        
        const iconColor = {
            success: 'text-green-400',
            error: 'text-red-400',
            warning: 'text-yellow-400', 
            info: 'text-blue-400'
        }[type] || 'text-blue-400';
        
        toast.innerHTML = `
            <div class="flex-1 w-0 p-4">
                <div class="flex items-start">
                    <div class="flex-shrink-0">
                        <svg class="h-6 w-6 ${iconColor}" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <div class="ml-3 w-0 flex-1 pt-0.5">
                        <p class="text-sm font-medium text-gray-900">${message}</p>
                    </div>
                </div>
            </div>
            <div class="flex border-l border-gray-200">
                <button class="w-full border border-transparent rounded-none rounded-r-lg p-4 flex items-center justify-center text-sm font-medium text-gray-600 hover:text-gray-500 focus:outline-none" onclick="this.parentElement.parentElement.remove()">
                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>
        `;
        
        document.getElementById('toast-container').appendChild(toast);
        
        // Animate in
        setTimeout(() => toast.classList.remove('translate-x-full'), 100);
        
        // Auto remove after 5 seconds
        setTimeout(() => {
            toast.classList.add('translate-x-full');
            setTimeout(() => toast.remove(), 300);
        }, 5000);
    }

    // Toggle customer info sidebar on mobile
    document.getElementById('toggle-customer-info').addEventListener('click', () => {
        const sidebar = document.getElementById('customer-info-sidebar');
        sidebar.classList.toggle('hidden');
    });

    // Search functionality
    document.getElementById('search-customer').addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();
        const customerItems = document.querySelectorAll('.customer-item');
        
        customerItems.forEach(item => {
            const customerName = item.querySelector('h3').textContent.toLowerCase();
            if (customerName.includes(searchTerm)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    });

    // Initialize
    loadCustomerList();
</script>